// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Movie_genre {
  id     Int            @id @default(autoincrement())  
  genre_name String
  movie Movie[]
  @@map("movies_genre")
}

model Movie_Country {
  id     Int            @id @default(autoincrement())  
  country_name String
  movie Movie[]
  @@map("movies_country")
}

model Movie {
  id     Int            @id @default(autoincrement())  
  name String
  release_date String
  country_id Int
  genre_id Int
  story String          @db.LongText
  run_time Int 
  age Int
  poster_url String  
  created_at DateTime?  @default(now())
  image Image[]
  movie_Category Movie_Category[]
  comment Comment[]  
  rating Rating[]
  want Want[]    
  movie_country   Movie_Country     @relation(fields: [country_id], references: [id])
  movie_genre   Movie_genre     @relation(fields: [genre_id], references: [id])
  @@map("movies")
}

model Image {
  id     Int            @id @default(autoincrement())  
  url String
  movie_id Int
  movie   Movie     @relation(fields: [movie_id], references: [id])
  @@map("images")
}

model Category {
  id     Int            @id @default(autoincrement())  
  category_name String
  movie_Category Movie_Category[]
  @@map("categories")
}

model Movie_Category {
  id     Int            @id @default(autoincrement())  
  category_id Int
  movie_id Int
  sequence Int
  category   Category     @relation(fields: [category_id], references: [id])
  movie   Movie     @relation(fields: [movie_id], references: [id])
  @@map("movies_categories")
}

model User {
  id     Int            @id @default(autoincrement())  
  email String          @unique
  password String
  name String 
  created_at DateTime?  @default(now())
  user_comment_like User_Comment_Like[]
  rating Rating[]
  want Want[]
  comment Comment[]
  @@map("users")
}

model User_Comment_Like {
  id     Int            @id @default(autoincrement())  
  comment_id Int
  user_id Int
  comment   Comment     @relation(fields: [comment_id], references: [id])
  user   User     @relation(fields: [user_id], references: [id])
  @@map("users_comments_likes")
}

model Comment {
  id     Int            @id @default(autoincrement())  
  comment String        @db.VarChar(255)
  user_id Int
  movie_id Int
  created_at DateTime?  @default(now())
  user_comment_like User_Comment_Like[]
  user   User     @relation(fields: [user_id], references: [id])
  movie   Movie     @relation(fields: [movie_id], references: [id])  
  @@map("comments")
}

model Rating {
  id     Int            @id @default(autoincrement())    
  user_id Int
  movie_id Int
  count Float
  created_at DateTime?  @default(now())
  user   User     @relation(fields: [user_id], references: [id])
  movie   Movie     @relation(fields: [movie_id], references: [id])  
  @@map("ratings")
}

model Want {
  id     Int            @id @default(autoincrement())
  want Boolean
  user_id Int
  movie_id Int
  created_at DateTime?  @default(now())
  user   User     @relation(fields: [user_id], references: [id])
  movie   Movie     @relation(fields: [movie_id], references: [id])  
  @@map("wants")
}

